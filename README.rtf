{\rtf1\ansi\ansicpg1252\cocoartf1187
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fswiss\fcharset0 ArialMT;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww25400\viewh14520\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs24 \cf0 FILE AND DIRECTORY ORGANIZATION:\
\
1. src  -  Contains the source files with package names.\
2. examples  -  Used for storing data files used in our examples\
3. build.xml  -   Apache Ant build file for building the project.\
4. Lab3Report.pdf  -  The lab report describing the framework.\
\
\
BUILD:\
In order to build the framework, execute the following command:\

\f1 \
\pard\pardeftab720
\cf0 	
\b ant clean compile jar
\b0 \
\
This creates an executable jar in ./build/jar\
\
\
EXECUTE:\
\
All the commands below are relative to the directory where the src, run, and the newly created build directories exist.\
\
After running the build command above, run the following command on the that invokes the name node. Please make sure to run it on the same name node as specified in \
the config file as the DFS-RegistryHost. Also, please make sure that the DFS-RegistryHost and JobTrackerHost are the same.\
\
	
\b java -cp build/jar/MapReduce.jar dfs.DfsRegGenerator 
\b0 \
\
Next, ssh into the datanodes and run the following command from the same directory in which the source directory resides.\
\
	
\b java -cp build/jar/MapReduce.jar dfs.DfsRegGenerator\
\

\b0 Finally, log into a new machine other than datanode and name node, and run the following command:\
\
	
\b java -cp build/jar/MapReduce.jar mapred.tests.MapReduceTest\
\

\b0 This will run the word count example. Unfortunately, we haven;t been able to throughly test it, so please callus if this doesn't work.
\b \
}